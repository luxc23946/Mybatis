<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 许多别名的注册 和基本类的注册都在 Configuration这个类中 -->

    
	<!-- 1、mybatis可以使用properties来引入外部properties配置文件的内容；
	       resource：引入类路径下的资源 
	       url：引入网络路径或者磁盘路径下的资源 
	-->
	<properties resource="db.properties"/>
	
	<!-- 
		2、settings包含很多重要的设置项
			name：设置项名          value：设置项取值
	 -->
	<settings>
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		<!-- 当参数为null时,向数据库发送NULL -->
		<setting name="jdbcTypeForNull" value="NULL"/>
		
		<!-- 采用log4j打印日志 -->
		<setting name="logImpl" value="LOG4J"/>  
		
		<!--显示的指定每个我们需要更改的配置的值，即使他是默认的。防止版本更新带来的问题  -->
		<setting name="lazyLoadingEnabled" value="true"/>
		
		<!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态。  -->
		<setting name="aggressiveLazyLoading" value="false"/>
		
		<!-- 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存  -->
		<setting name="cacheEnabled" value="true"/>
		
		<!--本地缓存作用域：（一级缓存SESSION）；当前会话的所有数据保存在会话缓存中； STATEMENT：可以禁用一级缓存；-->
		<setting name="localCacheScope" value="SESSION"/>
		
		<!--使openSession返回一个可以批量操作的会话 不建议这样做  这样的话会使每一个会话均为批处理会话 增大服务器负担-->
		<!--<setting name="defaultExecutorType" value="BATCH"/>-->
	</settings>
	
	<!-- 3、typeAliases：别名处理器：可以为我们的java类型起别名 ,别名不区分大小写
	-->
	<typeAliases>
		<!-- 1、typeAlias:为某个java类型起别名
				type:指定要起别名的类型全类名;默认别名就是类名小写；employee
				alias:指定新的别名  应用到Mapper.xml 的 resultType属性
		     2、package:为某个包下的所有类批量起别名 
				name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）
			 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名
		-->
		
		<!-- <typeAlias type="hkd.luxc.entities.Employee" alias="emp"/> -->
		<!-- <package name="hkd.luxc.entities"/> -->
	</typeAliases>
	
	
	<typeHandlers>
	  <!-- 告诉Mybatis在处理 EmpStatus枚举类型时使用 EnumOrdinalTypeHandler   
	                    而不再使用默认的 EnumTypeHandler
	                    如果不写javaType 则所有的枚举类型都由  EnumOrdinalTypeHandler
	  -->
	  <!-- 
      <typeHandler handler="org.apache.ibatis.type.EnumOrdinalTypeHandler" javaType="hkd.luxc.bean.EmpStatus" />
       -->
      
      <!--2、也可以在处理某个字段的时候告诉MyBatis用什么类型处理器
		保存：#{empStatus,typeHandler=xxxx}
		查询：
			<resultMap type="com.atguigu.mybatis.bean.Employee" id="MyEmp">
		 		<id column="id" property="id"/>
		 		<result column="empStatus" property="empStatus" typeHandler=""/>
		 	</resultMap>
		注意：如果在参数位置修改TypeHandler，应该保证保存数据和查询数据用的TypeHandler是一样的。
 		-->
 	  <!-- 使用自定义TypeHandler -->	
      <typeHandler handler="hkd.luxc.typehandler.EmpStatusTypeHandler" javaType="hkd.luxc.bean.EmpStatus" />
    </typeHandlers>
	
	<!-- 注册插件 -->
    <plugins>
       <!--  
       <plugin interceptor="hkd.luxc.dao.MyFirstPlugin">
          <property name="user" value="root"/>
          <property name="password" value="root"/>
       </plugin>
       <plugin interceptor="hkd.luxc.dao.MySecondPlugin"/>
       -->
       <plugin interceptor="com.github.pagehelper.PageInterceptor"/>
    </plugins>
	
	<!-- 
		4、environments：环境，mybatis可以配置多种环境 ,default指定使用某种环境。可以达到快速切换环境。
		   environment：配置一个具体的环境信息；必须有两个标签；id代表当前环境的唯一标识
			transactionManager：事务管理器；  别名在 org.apache.ibatis.session.Configuration中注册
				type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
					自定义事务管理器：实现TransactionFactory接口.type指定为全类名
				
			dataSource：数据源;
				type:数据源类型;UNPOOLED(UnpooledDataSourceFactory)
							|POOLED(PooledDataSourceFactory)
							|JNDI(JndiDataSourceFactory)
				自定义数据源：实现DataSourceFactory接口，type是全类名
	-->
	<environments default="dev_mysql">
		<environment id="dev_mysql">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${mysql.driver}" />
				<property name="url" value="${mysql.url}" />
				<property name="username" value="${mysql.user}" />
				<property name="password" value="${mysql.password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- 5、databaseIdProvider：支持多数据库厂商的；
		 type="DB_VENDOR"：VendorDatabaseIdProvider
		 	作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
		 	MySQL，Oracle，SQL Server,xxxx
	  -->
	<databaseIdProvider type="DB_VENDOR">
		<!-- 为不同的数据库厂商起别名 -->
		<property name="MySQL" value="mysql"/>
		<property name="Oracle" value="oracle"/>
		<property name="SQL Server" value="sqlserver"/>
	</databaseIdProvider>
	
	
	<!-- 6、mappers：将sql映射注册到全局配置中 -->
	<mappers>
	    <!-- 
			mapper:注册一个sql映射 
				注册配置文件
				resource：引用类路径下的sql映射文件
					mybatis/mapper/EmployeeMapper.xml
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml
					
				注册接口
				class：引用（注册）接口，
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
					3.批量注册 package 要求接口类和映射文件在同一目录下，且同名
		-->
		<!-- <mapper resource="mybatis/mapper/EmployeeMapper.xml"/> -->
		<mapper class="hkd.luxc.dao.EmployeeMapperAnnotation"/> 
		<mapper resource="mappers/EmployeeMapper.xml" />
		<mapper resource="mappers/EmployeeMapperPlus.xml" />
		<mapper resource="mappers/DepartmentMapper.xml"/>
		<mapper resource="mappers/EmployeeMapperDynamicSql.xml"/>
		<!-- 
		     批量注册： 如果要使配置文件的映射同样生效,映射文件名必须和接口同名,并且放在与接口同一目录下;
		-->
		  <!--  <package name="hkd.luxc.dao"/> -->
	</mappers>
</configuration>